// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package kafka.actions;

import java.time.Duration;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.PartitionInfo;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import kafka.impl.KafkaModule;
import kafka.impl.KafkaPropertiesFactory;
import kafka.proxies.Partition;
import kafka.proxies.Topic;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ListTopics extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use consumer.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __consumer;
	private final kafka.proxies.Consumer consumer;

	public ListTopics(
		IContext context,
		IMendixObject _consumer
	)
	{
		super(context);
		this.__consumer = _consumer;
		this.consumer = _consumer == null ? null : kafka.proxies.Consumer.initialize(getContext(), _consumer);
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		Properties kafkaProps = KafkaPropertiesFactory.getKafkaProperties(getContext(), consumer);
		KafkaConsumer<String, String> kafkaConsumer = new KafkaConsumer<>(kafkaProps);
		List<IMendixObject> result = new LinkedList<>();
		
		try {
			Map<String, List<PartitionInfo>> topics = kafkaConsumer.listTopics(Duration.ofMillis(10000));
			List<String> sortedTopics = new LinkedList<>();
			sortedTopics.addAll(topics.keySet());
			Collections.sort(sortedTopics);
			
			for (String topic : sortedTopics) {
				Topic topicObj = new Topic(getContext());
				topicObj.setName(topic);
				topicObj.setPartitions("");
				
				List<PartitionInfo> partitionInfos = topics.get(topic);
				
				List<PartitionInfo> partitions = new LinkedList<>();
				partitions.addAll(partitionInfos);
				Collections.sort(partitions, new Comparator<PartitionInfo>() {

					@Override
					public int compare(PartitionInfo o1, PartitionInfo o2) {
						return Integer.compare(o1.partition(), o2.partition());
					}
					
				});
				
				for (PartitionInfo partition : partitions) {
					Partition partitionObj = new Partition(getContext());
					partitionObj.setPartition_Topic(topicObj);
					partitionObj.setIdentifier(partition.partition());
					topicObj.setPartitions(topicObj.getPartitions() + "; " + partition.partition());
				}
				topicObj.setPartitions(topicObj.getPartitions().replaceFirst(";", ""));
				result.add(topicObj.getMendixObject());
			}
			
		} catch (Exception e) {
			KafkaModule.LOGGER.error("Error while obtaining list of topics from server " + consumer.getName() + ": " + e.getMessage(), e);
			throw e;
		} finally {
			kafkaConsumer.close();
		}
			
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ListTopics";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
