// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package demo_mq.actions;

import java.util.Hashtable;
import java.util.Properties;
import com.ibm.mq.*;
import com.ibm.mq.constants.MQConstants;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class JA_SendMessageToMQ extends CustomJavaAction<IMendixObject>
{
	private final java.lang.String Host;
	private final java.lang.Long Port;
	private final java.lang.String QManager;
	private final java.lang.String Queue;
	private final java.lang.String Channel;
	private final java.lang.String UserID;
	private final java.lang.String Password;
	private final java.lang.String Message;

	public JA_SendMessageToMQ(
		IContext context,
		java.lang.String _host,
		java.lang.Long _port,
		java.lang.String _qManager,
		java.lang.String _queue,
		java.lang.String _channel,
		java.lang.String _userID,
		java.lang.String _password,
		java.lang.String _message
	)
	{
		super(context);
		this.Host = _host;
		this.Port = _port;
		this.QManager = _qManager;
		this.Queue = _queue;
		this.Channel = _channel;
		this.UserID = _userID;
		this.Password = _password;
		this.Message = _message;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		MQQueueManager qMgr = null;
		MQQueue queue = null;

		Properties props = new Properties();
		props.put(MQConstants.HOST_NAME_PROPERTY, this.Host);
		props.put(MQConstants.PORT_PROPERTY, Integer.parseInt(this.Port.toString()));
		props.put(MQConstants.CHANNEL_PROPERTY, this.Channel);
		props.put(MQConstants.USER_ID_PROPERTY, this.UserID);
		props.put(MQConstants.PASSWORD_PROPERTY, this.Password);

		IMendixObject resultObj = Core.instantiate(getContext(), "DEMO_MQ.SendMessageResult");

		try {
		    qMgr = new MQQueueManager(this.QManager, props);
		    int openOptions = MQConstants.MQOO_INPUT_AS_Q_DEF | MQConstants.MQOO_OUTPUT;
		    queue = qMgr.accessQueue(this.Queue, openOptions);
		    
		    MQMessage mqMessage = new MQMessage();
		    mqMessage.writeString(this.Message);
		    
		    MQPutMessageOptions pmo = new MQPutMessageOptions();
		    queue.put(mqMessage, pmo);
		    
		    resultObj.setValue(getContext(), "Status", "Success");
		    resultObj.setValue(getContext(), "Information", "Message has been successfully sent:["+this.Message+"]");
		} catch (MQException e) {
		    if (e.reasonCode == MQConstants.MQRC_UNKNOWN_OBJECT_NAME) {
		    	resultObj.setValue(getContext(), "Status", "Failure");
		        resultObj.setValue(getContext(), "Information", "The queue does not exist," +e.reasonCode);
		    } else {
		        resultObj.setValue(getContext(), "Status", "Failure");
		        resultObj.setValue(getContext(), "Information", e.getMessage());
		    }
		} catch (Exception e) {
		    resultObj.setValue(getContext(), "Status", "Failure");
		    resultObj.setValue(getContext(), "Information", e.getMessage());
		} finally {
		    if (queue != null) {
		        try {
		            queue.close();
		        } catch (MQException e) {
		            e.printStackTrace();
		        }
		    }
		    if (qMgr != null) {
		        try {
		            qMgr.disconnect();
		        } catch (MQException e) {
		            e.printStackTrace();
		        }
		    }
		}
		return resultObj;        
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_SendMessageToMQ";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
